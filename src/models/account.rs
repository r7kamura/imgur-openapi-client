/*
 * Imgur API
 *
 * Imgur's API exposes the entire Imgur infrastructure via a standardized programmatic interface. Using Imgur's API, you can do just about anything you can do on imgur.com, while using your programming language of choice.
 *
 * The version of the OpenAPI document: 0.1.1
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Account {
    #[serde(rename = "avatar", skip_serializing_if = "Option::is_none")]
    pub avatar: Option<String>,
    #[serde(rename = "bio", skip_serializing_if = "Option::is_none")]
    pub bio: Option<String>,
    #[serde(rename = "created")]
    pub created: i32,
    #[serde(rename = "id")]
    pub id: i32,
    #[serde(rename = "pro_expiration")]
    pub pro_expiration: bool,
    #[serde(rename = "reputation_name")]
    pub reputation_name: String,
    #[serde(rename = "reputation")]
    pub reputation: i32,
    #[serde(rename = "url")]
    pub url: String,
    #[serde(rename = "user_follow")]
    pub user_follow: Box<crate::models::AccountUserFollow>,
}

impl Account {
    pub fn new(created: i32, id: i32, pro_expiration: bool, reputation_name: String, reputation: i32, url: String, user_follow: crate::models::AccountUserFollow) -> Account {
        Account {
            avatar: None,
            bio: None,
            created,
            id,
            pro_expiration,
            reputation_name,
            reputation,
            url,
            user_follow: Box::new(user_follow),
        }
    }
}


